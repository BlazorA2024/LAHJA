@page "/reset-password"
@using MudBlazor
@using CardShopping.Web.Token
 
@using System.Text
@using System.Text.Json
 
@inject NavigationManager Navigation
@inject TokenService TokenService


<MudPaper Class="pa-4 mx-auto mt-6" MaxWidth="400px">
    <MudText Typo="Typo.h5" Align="Align.Center">إعادة تعيين كلمة المرور</MudText>

    <!-- حقل البريد الإلكتروني الجديد -->
    <MudTextField @bind-Value="ResetPasswordModel.NewEmail" Label="البريد الإلكتروني الجديد" FullWidth="true" Required="true" />

    <!-- حقل كلمة المرور القديمة -->
    <MudTextField @bind-Value="ResetPasswordModel.OldPassword" Label="كلمة المرور القديمة" Type="password" FullWidth="true" Required="true" />

    <!-- حقل كلمة المرور الجديدة -->
    <MudTextField @bind-Value="ResetPasswordModel.NewPassword" Label="كلمة المرور الجديدة" Type="password" FullWidth="true" Required="true" />

    
    <MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" FullWidth="true" OnClick="ResetPasswordd">
        تحديث  
    </MudButton>

   
    <MudText Typo="Typo.caption" Color="MudBlazor.Color.Error" Style="margin-top: 16px;" Visible="@( !string.IsNullOrEmpty(ErrorMessage) )">
        @SuccessMessage
    </MudText>
    <MudText Typo="Typo.caption" Color="MudBlazor.Color.Success" Style="margin-top: 16px;" Visible="@( !string.IsNullOrEmpty(SuccessMessage) )">
        @SuccessMessage
    </MudText>

</MudPaper>

@code {
    [Inject] IHttpClientFactory HttpClientFactory { get; set; }
    private InputResetPassword ResetPasswordModel = new InputResetPassword();
    private string token;
   
    private string ErrorMessage;
    private string SuccessMessage;


    private async Task ResetPasswordd()
    {

        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        try
        {



            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("http://asg.tryasp.net/api/manage/info", ResetPasswordModel);

            if (response.IsSuccessStatusCode)
            {
                var OutputResetPassword = await response.Content.ReadFromJsonAsync<OutputResetPassword>();
                SuccessMessage = "تم تحديث البيانات بنجاح.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"خطأ: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"حدث خطأ: {ex.Message}";
        }
    }


    private async Task ResetPassworddd()
    {

        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        try
        {

     //        token = await TokenService.GetTokenAsync();

     //        if (string.IsNullOrEmpty(token))
     //        {

     //            Navigation.NavigateTo("/login");
     //        }
     //        var client = HttpClientFactory.CreateClient("ApiClient");
     // var requestMessage = new HttpRequestMessage(HttpMethod.Post, "http://asg.tryasp.net/api/manage/info");
          
     //        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer",token);
       
     //        requestMessage.Content = new StringContent(JsonSerializer.Serialize(ResetPasswordModel), Encoding.UTF8, "application/json");

     //        var response = await client.SendAsync(requestMessage);

            token = await TokenService.GetTokenAsync();

                   if (string.IsNullOrEmpty(token))
                   {

                       Navigation.NavigateTo("/login");
                   }
            var client = new HttpClient();

            // رابط الخدمة
            var url = "http://asg.tryasp.net/api/manage/info";

            // إعداد البيانات المرسلة في الطلب
            var requestData = new
            {
                newEmail = "engneerazdd@gmail.com",
                newPassword = "Azdeen2024###",
                oldPassword = "Azdeen2024###"
            };

            // تحويل البيانات إلى JSON
            var jsonContent = new StringContent(
                JsonSerializer.Serialize(requestData),
                Encoding.UTF8,
                "application/json"
            );

            // إعداد الطلب
            var request = new HttpRequestMessage(HttpMethod.Post, url)
                {
                    Content = jsonContent
                };

            // إضافة التوكن في الهيدر
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(
                "Bearer",
                 token
            );

            // إرسال الطلب
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var OutputResetPassword = await response.Content.ReadFromJsonAsync<OutputResetPassword>();
                SuccessMessage = "تم تحديث البيانات بنجاح.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"خطأ: {error}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"حدث خطأ: {ex.Message}";
        }
    }

    public class InputResetPassword
    {
         
        public string NewEmail { get; set; }
        public string NewPassword { get; set; }
        public string OldPassword { get; set; }
    }
    public class OutputResetPassword
    {
        
        public string Email { get; set; }
        public bool IsEmailConfirmed { get; set; }
    }





}

 
 
 
 
 
 